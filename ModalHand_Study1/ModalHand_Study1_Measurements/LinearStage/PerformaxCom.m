function [methodinfo,structs,enuminfo,ThunkLibName]=PerformaxCom
%PERFORMAXCOM Create structures to define interfaces found in 'PerformaxCom'.

%This function was generated by loadlibrary.m parser version  on Tue Nov 29 16:07:11 2022
%perl options:'PerformaxCom.i -outfile=PerformaxCom.m -thunkfile=PerformaxCom_thunk_pcwin64.c -header=PerformaxCom.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'PerformaxCom_thunk_pcwin64');
% extern  int nPerformaxCom ; 
fcns.name{fcnNum}='nPerformaxCom'; fcns.calltype{fcnNum}='data'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int fnPerformaxCom ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='fnPerformaxCom'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% BOOL  _stdcall  fnPerformaxComFlush ( IN HANDLE pHandle ); 
fcns.thunkname{fcnNum}='BOOLINHANDLEThunk';fcns.name{fcnNum}='fnPerformaxComFlush'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% BOOL  _stdcall  fnPerformaxComGetNumDevices ( OUT LPDWORD lpNumDevices ); 
fcns.thunkname{fcnNum}='BOOLOUTLPDWORDThunk';fcns.name{fcnNum}='fnPerformaxComGetNumDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% BOOL  _stdcall  fnPerformaxComGetProductString ( IN DWORD dwNumDevices , OUT LPVOID lpDeviceString , IN DWORD dwOptions ); 
fcns.thunkname{fcnNum}='BOOLINDWORDOUTLPVOIDINDWORDThunk';fcns.name{fcnNum}='fnPerformaxComGetProductString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error', 'error', 'error'};fcnNum=fcnNum+1;
% BOOL  _stdcall  fnPerformaxComOpen ( IN DWORD dwDeviceNum , OUT HANDLE * pHandle ); 
fcns.thunkname{fcnNum}='BOOLINDWORDvoidPtrThunk';fcns.name{fcnNum}='fnPerformaxComOpen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error', 'voidPtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall  fnPerformaxComClose ( IN HANDLE pHandle ); 
fcns.thunkname{fcnNum}='BOOLINHANDLEThunk';fcns.name{fcnNum}='fnPerformaxComClose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error'};fcnNum=fcnNum+1;
% BOOL  _stdcall  fnPerformaxComSetTimeouts ( IN DWORD dwReadTimeout , DWORD dwWriteTimeout ); 
fcns.thunkname{fcnNum}='BOOLINDWORDuint32Thunk';fcns.name{fcnNum}='fnPerformaxComSetTimeouts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error', 'uint32'};fcnNum=fcnNum+1;
% BOOL  _stdcall  fnPerformaxComSendRecv ( IN HANDLE pHandle , IN LPVOID wBuffer , IN DWORD dwNumBytesToWrite , IN DWORD dwNumBytesToRead , OUT LPVOID rBuffer ); 
fcns.thunkname{fcnNum}='BOOLINHANDLEINLPVOIDINDWORDINDWORDOUTLPVOIDThunk';fcns.name{fcnNum}='fnPerformaxComSendRecv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='error'; fcns.RHS{fcnNum}={'error', 'error', 'error', 'error', 'error'};fcnNum=fcnNum+1;
methodinfo=fcns;